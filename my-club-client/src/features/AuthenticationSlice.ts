/* eslint-disable @typescript-eslint/no-explicit-any */
import AuthService from '@/services/AuthService';
import { RootState } from '@/store';
import CookieService, { COOKIE_KEYS } from '@/utils/cookie';
import { PayloadAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';

export interface AuthenticationState {
  profile?: any;
  loading: boolean;
}

const initialState: AuthenticationState = {
  loading: false,
  profile: null,
};

export const loginAsync = createAsyncThunk(
  'authentication/login',
  async (payload: { username: string; password: string }, thunkAPI) => {
    const response = await AuthService.login(
      payload.username,
      payload.password,
    );
    if (response) {
      CookieService.set(COOKIE_KEYS.ACCESS_TOKEN, response.access_token);
      const jwtPayload = AuthService.parseJwt(response.access_token);
      thunkAPI.dispatch(setUserProfile(jwtPayload));
    }
    // The value we return becomes the `fulfilled` action payload
    return response;
  },
);

export const authenticationSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUserProfile: (state, action: PayloadAction<any>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.profile += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(loginAsync.fulfilled, (state) => {
        state.loading = false;
      })
      .addCase(loginAsync.rejected, (state) => {
        state.loading = false;
      });
  },
});

export const { setUserProfile } = authenticationSlice.actions;
export const selectAuthenticatedProfile = (state: RootState) =>
  state.authentication.profile;

export default authenticationSlice.reducer;
